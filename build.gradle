plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = '1.0-1.19'
group = 'com.github.gamingoninsulin.simpleid'
archivesBaseName = 'simpleid'


java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    mappings channel: 'official', version: '1.19.1'


    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'


            property 'forge.enabledGameTestNamespaces', 'simpletech'

            mods {
                simpletech {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'simpletech'

            mods {
                simpletech {
                    source sourceSets.main
                }
            }
        }


        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'simpletech'

            mods {
                simpletech {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'simpletech', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                simpletech {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

dependencies {

    minecraft 'net.minecraftforge:forge:1.19.1-42.0.2'
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"));
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"));

    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"));
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "simpletech",
                "Specification-Vendor"    : "simpletechsareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "simpletechsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
